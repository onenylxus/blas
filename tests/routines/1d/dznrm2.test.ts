// Import
import { isClose, isEqual, isPerf } from '../../testers';
import _C from '../../../utils/complex';
import blas from '../../../src/index';
import perf from '../../../utils/performance';

// Routine snippet
const { dznrm2 } = blas;

// Define test variables
let n: number;
let x: Dual[];
let incx: number;

// DZNRM2 routine test
describe('DZNRM2 routine test', () => {
  it('Case 1: n{10},x[10],incx{1}', () => {
    // Input
    n = 10;
    x = [
      _C(0, 0.76359346114045956),
      _C(0, 0),
      _C(1.3297992629225006134, -1.14765700923635139),
      _C(1.2724293214294046805, -0.28946157368822334),
      _C(0.4146414344564082199, -0.29921511789731614),
      _C(-1.5399500419037095433, -0.41151083279506701),
      _C(-0.9285670347135380753, 0.25222344815613229),
      _C(-0.2947204467905601977, -0.89192112728456863),
      _C(-0.0057671727475369552, 0.43568329935571865),
      _C(2.4046533888579508798, -1.23753842192995811),
    ];
    incx = 1;

    // Test
    const { result, time } = perf(dznrm2, {n, x, incx});
    isClose(result._ret, 4.1815805452999522);
    isEqual(result.n, 10);
    isClose(result.x, [
      _C(0, 0.76359346114045956),
      _C(0, 0),
      _C(1.3297992629225006134, -1.14765700923635139),
      _C(1.2724293214294046805, -0.28946157368822334),
      _C(0.4146414344564082199, -0.29921511789731614),
      _C(-1.5399500419037095433, -0.41151083279506701),
      _C(-0.9285670347135380753, 0.25222344815613229),
      _C(-0.2947204467905601977, -0.89192112728456863),
      _C(-0.0057671727475369552, 0.43568329935571865),
      _C(2.4046533888579508798, -1.23753842192995811),
    ]);
    isEqual(result.incx, 1);
    isPerf(time);
  });

  it('Case 2: n{0},x[10],incx{1}', () => {
    // Input
    n = 0;
    x = [
      _C(0, 0.76359346114045956),
      _C(0, 0),
      _C(1.3297992629225006134, -1.14765700923635139),
      _C(1.2724293214294046805, -0.28946157368822334),
      _C(0.4146414344564082199, -0.29921511789731614),
      _C(-1.5399500419037095433, -0.41151083279506701),
      _C(-0.9285670347135380753, 0.25222344815613229),
      _C(-0.2947204467905601977, -0.89192112728456863),
      _C(-0.0057671727475369552, 0.43568329935571865),
      _C(2.4046533888579508798, -1.23753842192995811),
    ];
    incx = 1;

    // Test
    const { result, time } = perf(dznrm2, {n, x, incx});
    isClose(result._ret, 0);
    isEqual(result.n, 0);
    isClose(result.x, [
      _C(0, 0.76359346114045956),
      _C(0, 0),
      _C(1.3297992629225006134, -1.14765700923635139),
      _C(1.2724293214294046805, -0.28946157368822334),
      _C(0.4146414344564082199, -0.29921511789731614),
      _C(-1.5399500419037095433, -0.41151083279506701),
      _C(-0.9285670347135380753, 0.25222344815613229),
      _C(-0.2947204467905601977, -0.89192112728456863),
      _C(-0.0057671727475369552, 0.43568329935571865),
      _C(2.4046533888579508798, -1.23753842192995811),
    ]);
    isEqual(result.incx, 1);
    isPerf(time);
  });
});
